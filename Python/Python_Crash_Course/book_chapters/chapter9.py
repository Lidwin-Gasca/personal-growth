


#                               CHAPTER      9





#                  üé≠ C L A S S E S






#La programaci√≥n orientada a objetos es uno de los enfoques m√°s efectivos para escribir software. En la programaci√≥n orientada a objetos, 
#escribes clases que representan cosas y situaciones del mundo real, y creas objetos basados ‚Äã‚Äãen estas clases. Cuando escribes una clase, 
#defines el comportamiento general que puede tener toda una categor√≠a de objetos.
#
#Cuando crea objetos individuales de la clase, cada objeto se equipa autom√°ticamente con el comportamiento general; 
#luego puede darle a cada objeto las caracter√≠sticas √∫nicas que desee. Se sorprender√° de lo bien que se pueden modelar 
#situaciones del mundo real con la programaci√≥n orientada a objetos.
#
#Crear un objeto a partir de una clase se denomina creaci√≥n de instancias y se trabaja con instancias de una clase. 
#En este cap√≠tulo, escribir√° clases y crear√° instancias de esas clases. Especificar√° el tipo de informaci√≥n que se puede 
#almacenar en las instancias y definir√° las acciones que se pueden realizar con estas instancias. Tambi√©n escribir√° clases 
#que ampl√≠en la funcionalidad de las clases existentes, de modo que clases similares puedan compartir c√≥digo de manera eficiente. 
#Almacenar√° sus clases en m√≥dulos e importar√° clases escritas por otros programadores en sus propios archivos de programa.
#
#Comprender la programaci√≥n orientada a objetos te ayudar√° a ver el mundo como lo hace un programador. 
#Lo ayudar√° a conocer realmente su c√≥digo, no solo lo que sucede l√≠nea por l√≠nea, sino tambi√©n los conceptos m√°s importantes detr√°s de √©l. 
#Conocer la l√≥gica detr√°s de las clases lo entrenar√° para pensar l√≥gicamente para que pueda escribir 
#programas que aborden de manera efectiva casi cualquier problema que encuentre.
#
#Las clases tambi√©n te facilitan la vida a ti y a los dem√°s programadores con los que trabajar√°s a medida que 
#te enfrentas a desaf√≠os cada vez m√°s complejos. Cuando usted y otros programadores escriban c√≥digo basado en 
#el mismo tipo de l√≥gica, podr√°n entender el trabajo de los dem√°s. Sus programas tendr√°n sentido para muchos 
#colaboradores, lo que permitir√° que todos logren m√°s.















            #ü¶ö           Creating and Using a Class

    #Puedes modelar casi cualquier cosa usando clases. Comencemos por escribir una clase simple, Perro, que represente un perro,
    #no un perro en particular, sino cualquier perro. ¬øQu√© sabemos sobre la mayor√≠a de los perros dom√©sticos? Bueno, todos tienen 
    #un nombre y una edad. Tambi√©n sabemos que la mayor√≠a de los perros se sientan y dan vueltas. 
    #Esas dos piezas de informaci√≥n (nombre y edad) y esos dos comportamientos (sentarse y darse la vuelta) ir√°n en nuestra clase 
    #de perros porque son comunes a la mayor√≠a de los perros. Esta clase le dir√° a Python c√≥mo hacer un objeto que represente a un perro. 
    #Despu√©s de escribir nuestra clase, la usaremos para crear instancias individuales, cada una de las cuales representa un perro espec√≠fico.











    


            #`1- Creating the Dog Class

    # Cada instancia creada a partir de la clase Perro almacenar√° un nombre y una edad, 
    #y le daremos a cada perro la capacidad de sentarse() y darse la vuelta():

class Dog:                                           		    #(1)
    """A simple attempt to model a dog"""             		    #(2)

    def __init__(self, name, age):                    		    #(3)
        """Initialize name and ahe attributes."""
        self.name = name									    #(4)
        self.age = age

    def sit(self):												#(5)
        """Simulate a dog sitting in response to a command."""
        print(f"{self.name} is now sitting.")

    def roll_over(self):
        """"Sumulate rolling over in respone to a command."""
        print(f"{self.name} rolled over!")

    #Hay mucho que notar aqu√≠, pero no te preocupes. 
    # Ver√° esta estructura a lo largo de este cap√≠tulo y tendr√° mucho tiempo para acostumbrarse a ella. 
    # En ‚û°(1)‚¨Ö definimos una clase llamada Perro. Por convenci√≥n, los nombres en may√∫sculas se refieren a clases en Python. 
    # No hay par√©ntesis en la definici√≥n de la clase porque estamos creando esta clase desde cero. 
    # En ‚û°(2)‚¨Ö escribimos una cadena de documentaci√≥n que describe lo que hace esta clase.


    #   --- The__init__() Method: ---

    #Una funci√≥n que es parte de una clase es un m√©todo. 
    # Todo lo que aprendi√≥ sobre las funciones tambi√©n se aplica a los m√©todos; 
    # la √∫nica diferencia pr√°ctica por ahora es la forma en que llamaremos a los m√©todos. 
    # El m√©todo __init__() en ‚û°(3)‚¨Ö es un m√©todo especial que Python ejecuta autom√°ticamente 
    # cada vez que creamos una nueva instancia basada en la clase Perro. 
    # Este m√©todo tiene dos guiones bajos iniciales y dos guiones bajos finales, 
    # una convenci√≥n que ayuda a evitar que los nombres de m√©todos predeterminados 
    # de Python entren en conflicto con los nombres de sus m√©todos. 
    # Aseg√∫rese de usar dos guiones bajos a cada lado de __init__(). 
    # Si usa solo uno en cada lado, el m√©todo no se llamar√° autom√°ticamente cuando use su clase, 
    # lo que puede generar errores que son dif√≠ciles de identificar.
    #
    #   Definimos el m√©todo the_init_() para que tenga tres par√°metros: self, name y age. 
    # El par√°metro self es obligatorio en la definici√≥n del m√©todo y debe aparecer antes que los dem√°s par√°metros. 
    # Debe incluirse en la definici√≥n porque cuando Python llame a este m√©todo m√°s adelante (para crear una instancia de Dog), 
    # la llamada al m√©todo pasar√° autom√°ticamente el argumento self. 
    # Cada llamada de m√©todo asociada con una instancia pasa autom√°ticamente a self, 
    # que es una referencia a la instancia misma; le da a la instancia individual acceso a los atributos y m√©todos de la clase. 
    # Cuando creamos una instancia de Dog, Python llamar√° al m√©todo _init_() de la clase Dog. 
    # Le pasaremos a Dog() un nombre y una edad como argumentos; self se pasa autom√°ticamente, por lo que no necesitamos pasarlo. 
    # Siempre que queramos crear una instancia de la clase Perro, proporcionaremos valores solo para los dos √∫ltimos par√°metros, 
    # nombre y edad.
    #
    #   Las dos variables definidas en ‚û°(4)‚¨Ö tienen cada una el prefijo self. 
    # Cualquier variable con el prefijo self est√° disponible para todos los m√©todos de la clase, 
    # y tambi√©n podremos acceder a estas variables a trav√©s de cualquier instancia creada a partir de la clase. 
    # La l√≠nea self.name = name toma el valor asociado con el nombre del par√°metro y lo asigna al nombre de la variable, 
    # que luego se adjunta a la instancia que se est√° creando. El mismo proceso ocurre con self.age age. 
    # Las variables a las que se puede acceder a trav√©s de instancias como esta se denominan atributos.
    #
    #   La clase Dog tiene otros dos m√©todos definidos: sit() y roll over() ‚û°(5)‚¨Ö. 
    # Debido a que estos m√©todos no necesitan informaci√≥n adicional para ejecutarse, 
    # solo los definimos para que tengan un par√°metro, self. 
    # Las instancias que creemos m√°s tarde tendr√°n acceso a estos m√©todos. 
    # En otras palabras, podr√°n sentarse y darse la vuelta. 
    # Por ahora, sit() y roll over() no hacen mucho. 
    # Simplemente imprimen un mensaje que dice que el perro est√° sentado o volte√°ndose. 
    #   Pero el concepto se puede extender a situaciones realistas: 
    # si esta clase fuera parte de un juego de computadora real, estos m√©todos contendr√≠an un c√≥digo 
    # para hacer que un perro animado se siente y se d√© la vuelta. Si esta clase se escribi√≥ para controlar un robot, 
    # estos m√©todos dirigir√≠an los movimientos que hacen que un perro rob√≥tico se siente y se d√© la vuelta.


























            #`2- Making an Instance from a class

    #Piense en una clase como un conjunto de instrucciones sobre c√≥mo crear una instancia.
    #  La clase Dog es un conjunto de instrucciones que le dice a Python c√≥mo crear instancias 
    # individuales que representen perros espec√≠ficos.
    #
    #   Hagamos una instancia que represente a un perro espec√≠fico:
class Dog:
    """Sup√≥n que aqu√≠ esta todo el codigo de hasta ay√° üëÜ arriba"""

my_dog = Dog('Willie', 6)                   #(1)
                                            
print(f"My dog's name is {my_dog.name}.")   #(2)
print(f"My dog is {my_dog.age} years old.") #(3)

    # La clase Dog que estamos usando aqu√≠ es la que acabamos de escribir en el ejemplo anterior. 
    # En ‚û°(1)‚¨Ö le decimos a Python que cree un perro cuyo nombre sea 'Willie' y cuya edad sea 6. 
    # Cuando Python lee esta l√≠nea, llama al m√©todo __init__() en Dog con los argumentos 'Willie' y 6. 
    # El El m√©todo __init__() crea una instancia que representa a este perro en particular y establece 
    # los atributos de nombre y edad usando los valores que proporcionamos. 
    # Python luego devuelve una instancia que representa a este perro. 
    # Asignamos esa instancia a la variable mi_perro. 
    # La convenci√≥n de nomenclatura es √∫til aqu√≠:
    # generalmente podemos asumir que un nombre en may√∫sculas como Dog se refiere a una clase, 
    # y un nombre en min√∫sculas como my_dog se refiere a una √∫nica instancia creada a partir de una clase.


    #   --- Accessing Atributes ---

    #Para acceder a los atributos de una instancia, utiliza la notaci√≥n de puntos. 
    # En ‚û°(2)‚¨Öaccedemos al valor del nombre del atributo de mi perro escribiendo:
my_dog.name
    #La notaci√≥n de puntos se usa a menudo en Python. 
    # Esta sintaxis demuestra c√≥mo Python encuentra el valor de un atributo. 
    # Aqu√≠, Python mira la instancia mi_perro y luego encuentra el nombre del atributo asociado con mi perro. 
    # Este es el mismo atributo al que se hace referencia como self.name en la clase Dog. 
    # En ‚û°(3)‚¨Öutilizamos el mismo enfoque para trabajar con el atributo edad.
    #   El resultado es un resumen de lo que sabemos sobre my_dog:
    #
    #           >>> My dog's name is Willie.
    #           >>> My dog is 6 years old.
    #


    #   --- Calling Methods ---

    #Despu√©s de crear una instancia de la clase Dog, podemos usar la notaci√≥n 
    # de puntos para llamar a cualquier m√©todo definido en Dog. 
    # Hagamos que nuestro perro se siente y se d√© la vuelta:
class Dog:
    """Imaginemonos que aqu√≠ esta el codigo de la 'clase' arriba en el primer tema"""
my_dog = Dog('Willie', 6)
my_dog.sit()
my_dog.roll_over()

    #Para llamar a un m√©todo, proporcione el nombre de la instancia (en este caso, mi_perro) y el m√©todo al que desea llamar,
    #  separados por un punto. Cuando Python lee my_dog.sit(), busca el m√©todo sit() en la clase Dog y ejecuta ese c√≥digo. 
    # Python interpreta la l√≠nea my_dog.roll_over() de la misma manera.
    #   Ahora Willie hace lo que le decimos:
    #
    #           >>> Willie is now sitting.
    #           >>> willlie rolled over!
    #
    #Esta sintaxis es bastante √∫til. Cuando a los atributos y m√©todos se les ha dado nombres descriptivos apropiados como nombre, edad, sit(),
    # y roll_over(), podemos inferir f√°cilmente lo que se supone que debe hacer un bloque de c√≥digo, incluso uno que nunca hayamos visto antes.


    #   --- Creating Multiple Instances ---

    #Puede crear tantas instancias de una clase como necesite. Vamos a crear un segundo perro llamado tu_perro:
class Dog:
    """Imaginemonos que aqu√≠ esta el codigo de la 'clase' arriba en el primer tema"""
my_dog = Dog('Willie', 6)
your_dog = Dog('Lucy', 3)

print(f"My dog's name is {my_dog.name}.")
print(f"My dog is {my_dog.age} years old.")
my_dog.sit()

print(f"\nYour dog's name is {your_dog.name}.")
print(f"your dog is {your_dog.age} years old.")
your_dog.sit()

#En este ejemplo, creamos un perro llamado Willie y un perro llamado Lucy. 
# Cada perro es una instancia separada con su propio conjunto de atributos, 
# capaz de realizar el mismo conjunto de acciones.
#
#Incluso si usamos el mismo nombre y edad para el segundo perro. 
# Python a√∫n crear√≠a una instancia separada de la clase Dog. 
# Puede crear tantas instancias de una clase como necesite, siempre que asigne a 
# cada instancia un nombre de variable √∫nico o que ocupe un lugar √∫nico en una lista o diccionario.



































                        #ü¶ö           Working with Clases and Instances

    #Puede usar clases para representar muchas situaciones del mundo real. Una vez que escriba una clase, 
    # pasar√° la mayor parte de su tiempo trabajando con instancias creadas a partir de esa clase. 
    # Una de las primeras tareas que querr√° hacer es modificar los atributos asociados con una instancia en particular. 
    # Puede modificar los atributos de una instancia directamente o escribir m√©todos que actualicen los atributos de formas espec√≠ficas.
    











            #`1- The Car Class

    #Escribamos una nueva clase que represente un autom√≥vil. 
    # Nuestra clase almacenar√° informaci√≥n sobre el tipo de autom√≥vil con el 
    # que estamos trabajando y tendr√° un m√©todo que resuma esta informaci√≥n:
class Car:
    """A simple attempt to represent a car"""

    def __init__(self, make, model, year):                  #(1)
        """Initialize attrivutes to describe a car."""
        self.make = make
        self.model = model
        self.year = year

    def get_descriptive_name(self):                         #(2)
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
my_new_car = Car('audi', 'a4', 2019)                        #(3)
print(my_new_car.get_descriptive_name())
    #En ‚û°(1)‚¨Ö en la clase Car, primero definimos el m√©todo _init_() con el par√°metro self, tal como lo hicimos antes con nuestra clase Dog. 
    # Tambi√©n le damos otros tres par√°metros: marca, modelo y a√±o. 
    # El m√©todo _init_() toma estos par√°metros y los asigna a los atributos que se asociar√°n con las instancias creadas a partir de esta clase. 
    # Cuando creamos una nueva instancia de Car, necesitaremos especificar una marca, modelo y a√±o para nuestra instancia.
    #
    #En ‚û°(2)‚¨Ö definimos un m√©todo llamado get_descriptive_name() que pone el a√±o, la marca y el modelo de un autom√≥vil en 
    # una cadena que describe claramente el autom√≥vil. Esto nos evitar√° tener que imprimir el valor de cada atributo individualmente. 
    # Para trabajar con los valores de los atributos en este m√©todo, usamos self.make, self.model y self.year.
    #
    # En ‚û°(3)‚¨Ö creamos una instancia de la clase Car y la asignamos a la variable my new car. 
    # Luego llamamos a get_descriptive_name() para mostrar qu√© tipo de autom√≥vil tenemos:
    #
    #           >>> 2019 Audi A4
    #
    #Para hacer la clase m√°s interesante, agreguemos un atributo que cambie con el tiempo. 
    # Agregaremos un atributo que almacene el kilometraje total del autom√≥vil.




            #`2- Setting a Default Value for an Attribute

    #Cuando se crea una instancia, los atributos se pueden definir sin pasarlos como par√°metros. 
    # Estos atributos se pueden definir en el m√©todo __init__(), donde se les asigna un valor predeterminado.

    #Agreguemos un atributo llamado lectura del od√≥metro que siempre comienza con un valor de 0. 
    # Tambi√©n agregaremos un m√©todo read_odometer() que nos ayuda a leer el od√≥metro de cada autom√≥vil:

class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

my_new_car = Car('audi', 'a4', 2019)                        #(3)
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()