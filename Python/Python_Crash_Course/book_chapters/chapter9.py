


#                               CHAPTER      9





#                  üé≠ C L A S S E S






#La programaci√≥n orientada a objetos es uno de los enfoques m√°s efectivos para escribir software. En la programaci√≥n orientada a objetos, 
#escribes clases que representan cosas y situaciones del mundo real, y creas objetos basados ‚Äã‚Äãen estas clases. Cuando escribes una clase, 
#defines el comportamiento general que puede tener toda una categor√≠a de objetos.
#
#Cuando crea objetos individuales de la clase, cada objeto se equipa autom√°ticamente con el comportamiento general; 
#luego puede darle a cada objeto las caracter√≠sticas √∫nicas que desee. Se sorprender√° de lo bien que se pueden modelar 
#situaciones del mundo real con la programaci√≥n orientada a objetos.
#
#Crear un objeto a partir de una clase se denomina creaci√≥n de instancias y se trabaja con instancias de una clase. 
#En este cap√≠tulo, escribir√° clases y crear√° instancias de esas clases. Especificar√° el tipo de informaci√≥n que se puede 
#almacenar en las instancias y definir√° las acciones que se pueden realizar con estas instancias. Tambi√©n escribir√° clases 
#que ampl√≠en la funcionalidad de las clases existentes, de modo que clases similares puedan compartir c√≥digo de manera eficiente. 
#Almacenar√° sus clases en m√≥dulos e importar√° clases escritas por otros programadores en sus propios archivos de programa.
#
#Comprender la programaci√≥n orientada a objetos te ayudar√° a ver el mundo como lo hace un programador. 
#Lo ayudar√° a conocer realmente su c√≥digo, no solo lo que sucede l√≠nea por l√≠nea, sino tambi√©n los conceptos m√°s importantes detr√°s de √©l. 
#Conocer la l√≥gica detr√°s de las clases lo entrenar√° para pensar l√≥gicamente para que pueda escribir 
#programas que aborden de manera efectiva casi cualquier problema que encuentre.
#
#Las clases tambi√©n te facilitan la vida a ti y a los dem√°s programadores con los que trabajar√°s a medida que 
#te enfrentas a desaf√≠os cada vez m√°s complejos. Cuando usted y otros programadores escriban c√≥digo basado en 
#el mismo tipo de l√≥gica, podr√°n entender el trabajo de los dem√°s. Sus programas tendr√°n sentido para muchos 
#colaboradores, lo que permitir√° que todos logren m√°s.















            #ü¶ö           Creating and Using a Class

    #Puedes modelar casi cualquier cosa usando clases. Comencemos por escribir una clase simple, Perro, que represente un perro,
    #no un perro en particular, sino cualquier perro. ¬øQu√© sabemos sobre la mayor√≠a de los perros dom√©sticos? Bueno, todos tienen 
    #un nombre y una edad. Tambi√©n sabemos que la mayor√≠a de los perros se sientan y dan vueltas. 
    #Esas dos piezas de informaci√≥n (nombre y edad) y esos dos comportamientos (sentarse y darse la vuelta) ir√°n en nuestra clase 
    #de perros porque son comunes a la mayor√≠a de los perros. Esta clase le dir√° a Python c√≥mo hacer un objeto que represente a un perro. 
    #Despu√©s de escribir nuestra clase, la usaremos para crear instancias individuales, cada una de las cuales representa un perro espec√≠fico.











    


            #`1- Creating the Dog Class

    # Cada instancia creada a partir de la clase Perro almacenar√° un nombre y una edad, 
    #y le daremos a cada perro la capacidad de sentarse() y darse la vuelta():

class Dog:                                           		    #(1)
    """A simple attempt to model a dog"""             		    #(2)

    def __init__(self, name, age):                    		    #(3)
        """Initialize name and ahe attributes."""
        self.name = name									    #(4)
        self.age = age

    def sit(self):												#(5)
        """Simulate a dog sitting in response to a command."""
        print(f"{self.name} is now sitting.")

    def roll_over(self):
        """"Sumulate rolling over in respone to a command."""
        print(f"{self.name} rolled over!")

    #Hay mucho que notar aqu√≠, pero no te preocupes. 
    # Ver√° esta estructura a lo largo de este cap√≠tulo y tendr√° mucho tiempo para acostumbrarse a ella. 
    # En ‚û°(1)‚¨Ö definimos una clase llamada Perro. Por convenci√≥n, los nombres en may√∫sculas se refieren a clases en Python. 
    # No hay par√©ntesis en la definici√≥n de la clase porque estamos creando esta clase desde cero. 
    # En ‚û°(2)‚¨Ö escribimos una cadena de documentaci√≥n que describe lo que hace esta clase.


    #   --- The__init__() Method: ---

    #Una funci√≥n que es parte de una clase es un m√©todo. 
    # Todo lo que aprendi√≥ sobre las funciones tambi√©n se aplica a los m√©todos; 
    # la √∫nica diferencia pr√°ctica por ahora es la forma en que llamaremos a los m√©todos. 
    # El m√©todo __init__() en ‚û°(3)‚¨Ö es un m√©todo especial que Python ejecuta autom√°ticamente 
    # cada vez que creamos una nueva instancia basada en la clase Perro. 
    # Este m√©todo tiene dos guiones bajos iniciales y dos guiones bajos finales, 
    # una convenci√≥n que ayuda a evitar que los nombres de m√©todos predeterminados 
    # de Python entren en conflicto con los nombres de sus m√©todos. 
    # Aseg√∫rese de usar dos guiones bajos a cada lado de __init__(). 
    # Si usa solo uno en cada lado, el m√©todo no se llamar√° autom√°ticamente cuando use su clase, 
    # lo que puede generar errores que son dif√≠ciles de identificar.
    #
    #   Definimos el m√©todo the_init_() para que tenga tres par√°metros: self, name y age. 
    # El par√°metro self es obligatorio en la definici√≥n del m√©todo y debe aparecer antes que los dem√°s par√°metros. 
    # Debe incluirse en la definici√≥n porque cuando Python llame a este m√©todo m√°s adelante (para crear una instancia de Dog), 
    # la llamada al m√©todo pasar√° autom√°ticamente el argumento self. 
    # Cada llamada de m√©todo asociada con una instancia pasa autom√°ticamente a self, 
    # que es una referencia a la instancia misma; le da a la instancia individual acceso a los atributos y m√©todos de la clase. 
    # Cuando creamos una instancia de Dog, Python llamar√° al m√©todo _init_() de la clase Dog. 
    # Le pasaremos a Dog() un nombre y una edad como argumentos; self se pasa autom√°ticamente, por lo que no necesitamos pasarlo. 
    # Siempre que queramos crear una instancia de la clase Perro, proporcionaremos valores solo para los dos √∫ltimos par√°metros, 
    # nombre y edad.
    #
    #   Las dos variables definidas en ‚û°(4)‚¨Ö tienen cada una el prefijo self. 
    # Cualquier variable con el prefijo self est√° disponible para todos los m√©todos de la clase, 
    # y tambi√©n podremos acceder a estas variables a trav√©s de cualquier instancia creada a partir de la clase. 
    # La l√≠nea self.name = name toma el valor asociado con el nombre del par√°metro y lo asigna al nombre de la variable, 
    # que luego se adjunta a la instancia que se est√° creando. El mismo proceso ocurre con self.age age. 
    # Las variables a las que se puede acceder a trav√©s de instancias como esta se denominan atributos.
    #
    #   La clase Dog tiene otros dos m√©todos definidos: sit() y roll over() ‚û°(5)‚¨Ö. 
    # Debido a que estos m√©todos no necesitan informaci√≥n adicional para ejecutarse, 
    # solo los definimos para que tengan un par√°metro, self. 
    # Las instancias que creemos m√°s tarde tendr√°n acceso a estos m√©todos. 
    # En otras palabras, podr√°n sentarse y darse la vuelta. 
    # Por ahora, sit() y roll over() no hacen mucho. 
    # Simplemente imprimen un mensaje que dice que el perro est√° sentado o volte√°ndose. 
    #   Pero el concepto se puede extender a situaciones realistas: 
    # si esta clase fuera parte de un juego de computadora real, estos m√©todos contendr√≠an un c√≥digo 
    # para hacer que un perro animado se siente y se d√© la vuelta. Si esta clase se escribi√≥ para controlar un robot, 
    # estos m√©todos dirigir√≠an los movimientos que hacen que un perro rob√≥tico se siente y se d√© la vuelta.


























            #`2- Making an Instance from a class

    #Piense en una clase como un conjunto de instrucciones sobre c√≥mo crear una instancia.
    #  La clase Dog es un conjunto de instrucciones que le dice a Python c√≥mo crear instancias 
    # individuales que representen perros espec√≠ficos.
    #
    #   Hagamos una instancia que represente a un perro espec√≠fico:
class Dog:
    """Sup√≥n que aqu√≠ esta todo el codigo de hasta ay√° üëÜ arriba"""

my_dog = Dog('Willie', 6)                   #(1)
                                            
print(f"My dog's name is {my_dog.name}.")   #(2)
print(f"My dog is {my_dog.age} years old.") #(3)

    # La clase Dog que estamos usando aqu√≠ es la que acabamos de escribir en el ejemplo anterior. 
    # En ‚û°(1)‚¨Ö le decimos a Python que cree un perro cuyo nombre sea 'Willie' y cuya edad sea 6. 
    # Cuando Python lee esta l√≠nea, llama al m√©todo __init__() en Dog con los argumentos 'Willie' y 6. 
    # El El m√©todo __init__() crea una instancia que representa a este perro en particular y establece 
    # los atributos de nombre y edad usando los valores que proporcionamos. 
    # Python luego devuelve una instancia que representa a este perro. 
    # Asignamos esa instancia a la variable mi_perro. 
    # La convenci√≥n de nomenclatura es √∫til aqu√≠:
    # generalmente podemos asumir que un nombre en may√∫sculas como Dog se refiere a una clase, 
    # y un nombre en min√∫sculas como my_dog se refiere a una √∫nica instancia creada a partir de una clase.


    #   --- Accessing Atributes ---

    #Para acceder a los atributos de una instancia, utiliza la notaci√≥n de puntos. 
    # En ‚û°(2)‚¨Öaccedemos al valor del nombre del atributo de mi perro escribiendo:
my_dog.name
    #La notaci√≥n de puntos se usa a menudo en Python. 
    # Esta sintaxis demuestra c√≥mo Python encuentra el valor de un atributo. 
    # Aqu√≠, Python mira la instancia mi_perro y luego encuentra el nombre del atributo asociado con mi perro. 
    # Este es el mismo atributo al que se hace referencia como self.name en la clase Dog. 
    # En ‚û°(3)‚¨Öutilizamos el mismo enfoque para trabajar con el atributo edad.
    #   El resultado es un resumen de lo que sabemos sobre my_dog:
    #
    #           >>> My dog's name is Willie.
    #           >>> My dog is 6 years old.
    #


    #   --- Calling Methods ---

    #Despu√©s de crear una instancia de la clase Dog, podemos usar la notaci√≥n 
    # de puntos para llamar a cualquier m√©todo definido en Dog. 
    # Hagamos que nuestro perro se siente y se d√© la vuelta:
class Dog:
    """Imaginemonos que aqu√≠ esta el codigo de la 'clase' arriba en el primer tema"""
my_dog = Dog('Willie', 6)
my_dog.sit()
my_dog.roll_over()

    #Para llamar a un m√©todo, proporcione el nombre de la instancia (en este caso, mi_perro) y el m√©todo al que desea llamar,
    #  separados por un punto. Cuando Python lee my_dog.sit(), busca el m√©todo sit() en la clase Dog y ejecuta ese c√≥digo. 
    # Python interpreta la l√≠nea my_dog.roll_over() de la misma manera.
    #   Ahora Willie hace lo que le decimos:
    #
    #           >>> Willie is now sitting.
    #           >>> willlie rolled over!
    #
    #Esta sintaxis es bastante √∫til. Cuando a los atributos y m√©todos se les ha dado nombres descriptivos apropiados como nombre, edad, sit(),
    # y roll_over(), podemos inferir f√°cilmente lo que se supone que debe hacer un bloque de c√≥digo, incluso uno que nunca hayamos visto antes.


    #   --- Creating Multiple Instances ---

    #Puede crear tantas instancias de una clase como necesite. Vamos a crear un segundo perro llamado tu_perro:
class Dog:
    """Imaginemonos que aqu√≠ esta el codigo de la 'clase' arriba en el primer tema"""
my_dog = Dog('Willie', 6)
your_dog = Dog('Lucy', 3)

print(f"My dog's name is {my_dog.name}.")
print(f"My dog is {my_dog.age} years old.")
my_dog.sit()

print(f"\nYour dog's name is {your_dog.name}.")
print(f"your dog is {your_dog.age} years old.")
your_dog.sit()

#En este ejemplo, creamos un perro llamado Willie y un perro llamado Lucy. 
# Cada perro es una instancia separada con su propio conjunto de atributos, 
# capaz de realizar el mismo conjunto de acciones.
#
#Incluso si usamos el mismo nombre y edad para el segundo perro. 
# Python a√∫n crear√≠a una instancia separada de la clase Dog. 
# Puede crear tantas instancias de una clase como necesite, siempre que asigne a 
# cada instancia un nombre de variable √∫nico o que ocupe un lugar √∫nico en una lista o diccionario.



































                        #ü¶ö           Working with Clases and Instances

    #Puede usar clases para representar muchas situaciones del mundo real. Una vez que escriba una clase, 
    # pasar√° la mayor parte de su tiempo trabajando con instancias creadas a partir de esa clase. 
    # Una de las primeras tareas que querr√° hacer es modificar los atributos asociados con una instancia en particular. 
    # Puede modificar los atributos de una instancia directamente o escribir m√©todos que actualicen los atributos de formas espec√≠ficas.
    











            #`1- The Car Class

    #Escribamos una nueva clase que represente un autom√≥vil. 
    # Nuestra clase almacenar√° informaci√≥n sobre el tipo de autom√≥vil con el 
    # que estamos trabajando y tendr√° un m√©todo que resuma esta informaci√≥n:
class Car:
    """A simple attempt to represent a car"""

    def __init__(self, make, model, year):                  #(1)
        """Initialize attrivutes to describe a car."""
        self.make = make
        self.model = model
        self.year = year

    def get_descriptive_name(self):                         #(2)
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
my_new_car = Car('audi', 'a4', 2019)                        #(3)
print(my_new_car.get_descriptive_name())
    #En ‚û°(1)‚¨Ö en la clase Car, primero definimos el m√©todo _init_() con el par√°metro self, tal como lo hicimos antes con nuestra clase Dog. 
    # Tambi√©n le damos otros tres par√°metros: marca, modelo y a√±o. 
    # El m√©todo _init_() toma estos par√°metros y los asigna a los atributos que se asociar√°n con las instancias creadas a partir de esta clase. 
    # Cuando creamos una nueva instancia de Car, necesitaremos especificar una marca, modelo y a√±o para nuestra instancia.
    #
    #En ‚û°(2)‚¨Ö definimos un m√©todo llamado get_descriptive_name() que pone el a√±o, la marca y el modelo de un autom√≥vil en 
    # una cadena que describe claramente el autom√≥vil. Esto nos evitar√° tener que imprimir el valor de cada atributo individualmente. 
    # Para trabajar con los valores de los atributos en este m√©todo, usamos self.make, self.model y self.year.
    #
    # En ‚û°(3)‚¨Ö creamos una instancia de la clase Car y la asignamos a la variable my new car. 
    # Luego llamamos a get_descriptive_name() para mostrar qu√© tipo de autom√≥vil tenemos:
    #
    #           >>> 2019 Audi A4
    #
    #Para hacer la clase m√°s interesante, agreguemos un atributo que cambie con el tiempo. 
    # Agregaremos un atributo que almacene el kilometraje total del autom√≥vil.




            #`2- Setting a Default Value for an Attribute

    #Cuando se crea una instancia, los atributos se pueden definir sin pasarlos como par√°metros. 
    # Estos atributos se pueden definir en el m√©todo __init__(), donde se les asigna un valor predeterminado.

    #Agreguemos un atributo llamado lectura del od√≥metro que siempre comienza con un valor de 0. 
    # Tambi√©n agregaremos un m√©todo read_odometer() que nos ayuda a leer el od√≥metro de cada autom√≥vil:

class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   #(1)

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        #(2)
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

my_new_car = Car('audi', 'a4', 2019)                        
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()

    #Esta vez, cuando Python llama al m√©todo __init__() para crear una nueva instancia, 
    # almacena los valores de marca, modelo y a√±o como atributos, como lo hizo en el ejemplo anterior. 
    # Luego, Python crea un nuevo atributo llamado lectura del od√≥metro y establece su valor inicial en 0 ‚û°(1)‚¨Ö. 
    # Tambi√©n tenemos un nuevo m√©todo llamado read_odometer() en ‚û°(2)‚¨Ö que facilita la lectura del kilometraje de un autom√≥vil.
    #
    #Nuestro coche arranca con un kilometraje de 0:
    #
    #           >>> 2019 Audi A4
    #           >>> This car has 0 miles on it.
    #
    #No se venden muchos autos con exactamente 0 millas en el od√≥metro, 
    #por lo que necesitamos una forma de cambiar el valor de este atributo.




















                #ü¶ö           Modifying Attribute Values

    #Puede cambiar el valor de un atributo de tres maneras: puede cambiar el valor directamente a trav√©s de una instancia, 
    # establecer el valor a trav√©s de un m√©todo o incrementar el valor (agregarle una cierta cantidad) a trav√©s de un m√©todo. 
    # Veamos cada uno de estos enfoques.











            #`1- Modifying an Attribute's Value Directly
    
    #The simplest way to modify the value of an attribute is to access the attribute directly through an instance. 
    # Here we set the odometer reading to 23 directly:

class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

my_new_car = Car('audi', 'a4', 2019)                        
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()

my_new_car.odometer_reading = 23    #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö #(1)
my_new_car.read_odometer()          #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö

    #En ‚û°(1)‚¨Ö usamos la notaci√≥n de puntos para acceder al atributo odometer_reading del autom√≥vil y establecer su valor directamente.
    # Esta l√≠nea le dice a Python que tome la instancia my_new_car, encuentre el atributo de odometer_reading asociado con √©l,
    # y establezca el valor de ese atributo en 23:
    #
    #           >>> 2019 Audi A4
    #           >>> This car has 23 miles on it.
    #
    #A veces querr√°s acceder a los atributos directamente como este, pero otras veces querr√°s escribir un m√©todo que actualice el valor por ti.

















            #`2-    Modifying an Attribute's Value Through a Method

    #Puede ser √∫til tener m√©todos que actualicen ciertos atributos por usted. 
    # En lugar de acceder al atributo directamente, pasa el nuevo valor a un m√©todo que maneja la actualizaci√≥n internamente. 
    # Aqu√≠ hay un ejemplo que muestra un m√©todo llamado update_odometer():

class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                             #‚¨Ö  #(1)
        """Set the odometer reading in to the given value."""       #‚¨Ö
        self.odometer_reading = mileage                             #‚¨Ö

my_new_car = Car('audi', 'a4', 2019)                        
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()

my_new_car.update_odometer(23)                                       #‚¨Ö #(2)
my_new_car.read_odometer()

    #La √∫nica modificaci√≥n a Car es la adici√≥n de update odometer() en ‚û°(1)‚¨Ö. 
    # Este m√©todo toma un valor de kilometraje y lo asigna a la self.odometer_reading.
    #  En ‚û°(2)‚¨Ö llamamos a update_odometer() y le damos 23 como argumento (correspondiente al par√°metro de kilometraje en la definici√≥n del m√©todo). 
    # Establece read_odometer en 23, y read odometer() imprime la lectura/reading:
    #
    #           >>> 2019 Audi A4
    #           >>> This car has 23 miles on it.
    #
    #Podemos extender el m√©todo update_odometer() para hacer un trabajo adicional cada vez que se modifica la lectura del od√≥metro. 
    # Agreguemos un poco de l√≥gica para asegurarnos de que nadie intente hacer retroceder la lectura del od√≥metro:

class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                                 #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö       
        """
        Set the odometer reading to the giving value.
        Reject the chang if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:                            #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö    #(1)
            self.odometer_reading = mileage                             #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö
        else:                                                           #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö    #(2)
            print("You can't roll back an odometer!")                   #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö

    #Ahora actualizar el od√≥metro() verifica que la nueva lectura tenga sentido antes de modificar el atributo. 
    # Si el nuevo kilometraje, el kilometraje, es mayor o igual que el kilometraje existente, la lectura del self.odometer, 
    # puede actualizar la lectura del od√≥metro al nuevo kilometraje ‚û°(1)‚¨Ö. 
    # Si el nuevo kilometraje es menor que el kilometraje existente, recibir√° una advertencia de que 
    # no puede retroceder un od√≥metro que incremente el valor de un atributo a trav√©s de un m√©todo ‚û°(2)‚¨Ö.



























            #`3- Incrementing an Attribute's Value Through a Method

    #A veces querr√° incrementar el valor de un atributo en cierta cantidad en lugar de establecer un valor completamente nuevo.
    # Digamos que compramos un autom√≥vil usado y acumulamos 100 millas entre el momento en que lo compramos y el momento en que lo registramos. 
    # Aqu√≠ hay un m√©todo que nos permite pasar esta cantidad incremental y agregar ese valor a la lectura del od√≥metro:
class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                                      
        """
        Set the odometer reading to the giving value.
        Reject the chang if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:                            
            self.odometer_reading = mileage                             
        else:                                                          
            print("You can't roll back an odometer!")

            #‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨ácodigo nuevo‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á
    def increment_odometer(self, miles):                                        #(1)
        """Add the given amount to the odometer reading."""
        self.odometer_reading += miles
        
my_used_car = Car('subaru', 'outback', 2015)                                    #(2)
print(my_used_car.get_descriptive_name())

my_used_car.update_odometer(23_500)                                             #(3)
my_used_car.read_odometer()

my_used_car.increment_odometer(100)                                             #(4)
my_used_car.read_odometer()

    # El nuevo m√©todo de incremento del od√≥metro() en ‚û°(1)‚¨Ö toma un n√∫mero de millas y agrega este valor a la lectura de self.odometer. 
    # En ‚û°(2)‚¨Ö creamos un auto usado, my_used_car. 
    # Establecemos su cuentakil√≥metros en 23 500 llamando a update_odometer() y pas√°ndole 23 500 en ‚û°(3)‚¨Ö. 
    # En ‚û°(4)‚¨Ö llamamos a increment odometer() y le pasamos 100 para sumar las 100 millas que recorrimos entre comprar el auto y registrarlo:
    #
    #           >>> 2015 Subaru Outback
    #           >>> This car has 23500 miles on it.
    #           >>> This car has 23600 miles on it.
    #
    #Puede modificar f√°cilmente este m√©todo para rechazar incrementos negativos para que nadie use esta funci√≥n para retroceder un od√≥metro.


    #NOTE: 
    #Puede usar m√©todos como este para controlar c√≥mo los usuarios de su programa 
    # actualizan valores como la lectura del od√≥metro, pero cualquier persona con 
    # acceso al programa puede establecer la lectura del od√≥metro en cualquier 
    # valor accediendo directamente al atributo. 
    # La seguridad eficaz exige una atenci√≥n extrema a los detalles adem√°s de las 
    # comprobaciones b√°sicas como las que se muestran aqu√≠.




















                #ü¶ö           Inheritance / Herencia

    #No siempre tienes que empezar desde cero al escribir una clase. 
    # Si la clase que est√° escribiendo es una versi√≥n especializada de otra clase que escribi√≥, puede usar la herencia. 
    # Cuando una clase hereda de otra, toma los atributos y m√©todos de la primera clase. 
    # La clase original se llama clase padre y la nueva clase es la clase hija. 
    # La clase secundaria puede heredar cualquiera o todos los atributos y m√©todos de su clase principal, 
    # pero tambi√©n es libre de definir sus propios atributos y m√©todos nuevos.
    



            #`1- The  __init__()Method for a Child Class
        #Cuando est√° escribiendo una nueva clase basada en una clase existente, a menudo querr√° llamar al m√©todo __init__() desde la clase principal. 
        # Esto inicializar√° todos los atributos que se definieron en el m√©todo parent_init_() y los har√° disponibles en la clase secundaria.

        #Como ejemplo, modelemos un coche el√©ctrico. Un autom√≥vil el√©ctrico es solo un tipo espec√≠fico de autom√≥vil, 
        # por lo que podemos basar nuestra nueva clase "ElectricCar" en la clase "Car" que escribimos anteriormente. 
        # Entonces solo tendremos que escribir c√≥digo para los atributos y el comportamiento espec√≠fico de los autos el√©ctricos.

    # Comencemos por hacer una versi√≥n simple de la clase ElectricCar, que hace todo lo que hace la clase Car:
class Car:  #(1)
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                                      
        """
        Set the odometer reading to the giving value.
        Reject the chang if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:                            
            self.odometer_reading = mileage                             
        else:                                                          
            print("You can't roll back an odometer!")

    def increment_odometer(self, miles):
        """Add the given amount to the odometer reading."""
        self.odometer_reading += miles


            #‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨ácodigo nuevo‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á
class ElectricCar(Car):                                                 #(2)
    """Represent aspects of a car, specific to electric vehicles."""

    def __init__(self, make, model, year):                              #(3)
        """Initialize attributes of parent class"""
        super().__init__(make, model, year)                             #(4)

my_tesla = ElectricCar('tesla', 'model s', 2019)                        #(5)
print(my_tesla.get_descriptive_name())

    #En ‚û°(1)‚¨Ö comenzamos con Car. 
    # Cuando crea una clase secundaria, la clase principal debe ser parte del archivo actual y debe aparecer antes que la clase secundaria en el archivo. 
    # En ‚û°(2)‚¨Ö definimos la clase secundaria, ElectricCar. 
    # El nombre de la clase principal debe incluirse entre par√©ntesis en la definici√≥n de una clase secundaria. 
    # El m√©todo __init__() en ‚û°(3)‚¨Ö toma la informaci√≥n necesaria para crear una instancia de Car.
    #
    #La funci√≥n super() en ‚û°(4)‚¨Ö es una funci√≥n especial que le permite llamar a un m√©todo de la clase principal. 
    # Esta l√≠nea le dice a Python que llame al m√©todo __init__() desde Car, lo que le da a una instancia de ElectricCar todos los atributos definidos en ese m√©todo. 
    # El nombre super proviene de una convenci√≥n de llamar a la clase principal una superclase y a la clase secundaria una subclase.
    #
    #Probamos si la herencia funciona correctamente al intentar crear un autom√≥vil el√©ctrico con el mismo tipo de informaci√≥n que proporcionar√≠amos al 
    # fabricar un autom√≥vil normal. En ‚û°(5)‚¨Öcreamos una instancia de la clase ElectricCar y la asignamos a mi tesla. 
    # Esta l√≠nea llama al m√©todo __init__() definido en ElectricCar, que a su vez le dice a Python que llame al m√©todo _init_() definido en la clase padre Car. 
    # Proporcionamos los argumentos 'tesla', 'model s' y 2019.
    #
    #Aparte de_init_(), todav√≠a no hay atributos o m√©todos que sean particulares de un autom√≥vil el√©ctrico. 
    # En este punto, solo nos estamos asegurando de que el autom√≥vil el√©ctrico tenga los comportamientos de autom√≥vil apropiados:
    #
    #           >>> 2019 Tesla Model s
    # La instancia de ElectricCar funciona como una instancia de Car, por lo que ahora 
    # podemos comenzar a definir atributos y m√©todos espec√≠ficos para autos el√©ctricos.















            #`2- Defining Attributes and Methods for the Child Class

        #Una vez que tenga una clase secundaria que herede de una clase principal, puede agregar los 
        # nuevos atributos y m√©todos necesarios para diferenciar la clase secundaria de la clase principal.

#Agreguemos un atributo que sea espec√≠fico para los autos el√©ctricos (una bater√≠a, por ejemplo) y un m√©todo para informar sobre este atributo. 
# Guardaremos el tama√±o de la bater√≠a y escribiremos un m√©todo que imprima una descripci√≥n de la bater√≠a:
class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                                      
        """
        Set the odometer reading to the giving value.
        Reject the chang if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:                            
            self.odometer_reading = mileage                             
        else:                                                          
            print("You can't roll back an odometer!")

    def increment_odometer(self, miles):
        """Add the given amount to the odometer reading."""
        self.odometer_reading += miles


class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicles."""

    def __init__(self, make, model, year):
        """
        Initialize attributes of the parent class.
        Then initialize attributes specific to an electric car.
        """
        super().__init__(make, model, year)
        self.battery_size = 75          #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Öcodigo nuevo (1)

    def describe_battery(self):         #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Öcodigo nuevo (2)
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kwh battery.")

my_tesla = ElectricCar('tesla', 'model s', 2019)
print(my_tesla.get_descriptive_name())
my_tesla.describe_battery()

    #En ‚û°(1)‚¨Ö agregamos un nuevo atributo self.battery_size y establecemos su valor inicial en, por ejemplo, 75. 
    # Este atributo se asociar√° con todas las instancias creadas a partir de la clase ElectricCar pero no se asociar√° con ninguna instancia de Car. 
    # Tambi√©n agregamos un m√©todo llamado describe_battery() que imprime informaci√≥n sobre la bater√≠a en ‚û°(2)‚¨Ö. 
    # Cuando llamamos a este m√©todo, obtenemos una descripci√≥n que es claramente espec√≠fica de un coche el√©ctrico:
    #
    #           >>> 2019 Tesla Model S
    #           >>> This car has a 75-kwh battery.
    #
    #No hay l√≠mite en cu√°nto puede especializarse en la clase ElectricCar. 
    # Puede agregar tantos atributos y m√©todos como necesite para modelar un autom√≥vil el√©ctrico con el grado de precisi√≥n que necesite. 
    # Un atributo o m√©todo que podr√≠a pertenecer a cualquier autom√≥vil, en lugar de uno que sea espec√≠fico de un autom√≥vil el√©ctrico, 
    # debe agregarse a la clase Car en lugar de a la clase ElectricCar. 
    # Entonces, cualquiera que use la clase Car tambi√©n tendr√° esa funcionalidad disponible, 
    # y la clase ElectricCar solo contendr√° el c√≥digo para la informaci√≥n y el comportamiento espec√≠fico de los veh√≠culos el√©ctricos.














            #`3- Overriding Methods from the Parent Class

        #Puede anular cualquier m√©todo de la clase principal que no se ajuste a lo que intenta modelar con la clase secundaria. 
        # Para hacer esto, defina un m√©todo en la clase secundaria con el mismo nombre que el m√©todo que desea anular en la clase principal. 
        # Python ignorar√° el m√©todo de la clase principal y solo prestar√° atenci√≥n al m√©todo que defina en la clase secundaria.

#Digamos que la clase Car ten√≠a un m√©todo llamado fill_gas_tank(). 
# Este m√©todo no tiene sentido para un veh√≠culo totalmente el√©ctrico, 
# por lo que es posible que desee anular este m√©todo. Aqu√≠ hay una forma de hacerlo:
class ElectricCar(Car):
    #--Codigo Recortado--
    def fill_gas_tank(self):
        """Electric cars don't have gas tanks."""
        print("This car doesn't need a gas thank")
#Ahora, si alguien intenta llamar a fill_gas_tank() con un autom√≥vil el√©ctrico, 
# Python ignorar√° el m√©todo fill_gas_tank() en Car y ejecutar√° este c√≥digo en su lugar. 
# Cuando usa la herencia, puede hacer que sus clases secundarias conserven 
# lo que necesita y anule todo lo que no necesite de la clase principal.















            #`4- Instances as Attributes

        #Al modelar algo del mundo real en c√≥digo, es posible que descubra que est√° agregando m√°s y m√°s detalles a una clase. 
        # Descubrir√° que tiene una lista creciente de atributos y m√©todos y que sus archivos son cada vez m√°s largos. 
        # En estas situaciones, es posible que reconozca que parte de una clase se puede escribir como una clase separada. 
        # Puede dividir su clase grande en clases m√°s peque√±as que trabajen juntas.

        #Por ejemplo, si continuamos agregando detalles a la clase ElectricCar, podemos notar que estamos agregando muchos 
        # atributos y m√©todos espec√≠ficos para la bater√≠a del autom√≥vil. Cuando vemos que esto sucede, podemos detener y 
        # mover esos atributos y m√©todos a una clase separada llamada Bater√≠a.
         
# Entonces podemos usar una instancia de Bater√≠a como atributo en la clase ElectricCar:
class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                                      
        """
        Set the odometer reading to the giving value.
        Reject the chang if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:                            
            self.odometer_reading = mileage                             
        else:                                                          
            print("You can't roll back an odometer!")

    def increment_odometer(self, miles):
        """Add the given amount to the odometer reading."""
        self.odometer_reading += miles



            #‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨ácodigo nuevo‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á

class Battery:                                                                                  #(1)
    """Asimple attemp to model a battery for an electric car."""

    def __init__(self, battery_size=75):                                                          #(2)
        """Initialize the battery's attributs."""
        self.battery_size = battery_size

    def describe_battery(self):                                                                 #(3)
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kwh battery.")

            #‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ücodigo nuevo‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü



class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicles."""

    def __init__(self, make, model, year):
        """
        Initialize attributes of the parent class.
        Then initialize attributes specific to an electric car.
        """
        super().__init__(make, model, year)
        self.battery = Battery()       #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Öcodigo nuevo (5)

    def describe_battery(self):
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kwh battery.")

my_tesla = ElectricCar('tesla', 'model s', 2019)

print(my_tesla.get_descriptive_name())
my_tesla.battery.describe_battery()    #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Öcodigo nuevo




#En ‚û°(1)‚¨Ö definimos una nueva clase llamada Bater√≠a que no hereda de ninguna otra clase. 
# El m√©todo __init__() en ‚û°(2)‚¨Ö tiene un par√°metro, battery_size, adem√°s de self. 
# Este es un par√°metro opcional que establece el tama√±o de la bater√≠a en 75 si no se proporciona ning√∫n valor. 
# El m√©todo describe_battery() tambi√©n se ha movido a esta clase ‚û°(3)‚¨Ö.

#En la clase ElectricCar, ahora agregamos un atributo llamado self.battery ‚û°(4)‚¨Ö. 
# Esta l√≠nea le dice a Python que cree una nueva instancia de Bater√≠a (con un tama√±o predeterminado de 75, 
# porque no estamos especificando un valor) y asigne esa instancia al atributo self.battery. 
# Esto suceder√° cada vez que se llame al m√©todo init_(); cualquier instancia de ElectricCar ahora 
# tendr√° una instancia de bater√≠a creada autom√°ticamente.

#Creamos un coche el√©ctrico y lo asignamos a la variable my_tesla. 
# Cuando queremos describir la bater√≠a, necesitamos trabajar con el atributo de la bater√≠a del autom√≥vil:
my_tesla.battery.describe_battery()
#Esta l√≠nea le dice a Python que mire la instancia my tesla, busque su atributo de bater√≠a y llame al 
# m√©todo describe_battery() que est√° asociado con la instancia de bater√≠a almacenada en el atributo.

#La salida es id√©ntica a lo que vimos anteriormente:
#
#           >>> 2019 Tesla Model S
#           >>> This car has a 75-kwh battery.
#
#Esto parece mucho trabajo extra, pero ahora podemos describir la bater√≠a con tanto detalle como queramos 
# sin saturar la clase ElectricCar. Agreguemos otro m√©todo a Bater√≠a que informe el alcance del autom√≥vil 
# seg√∫n el tama√±o de la bater√≠a:
class Car:
    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0                                   

    def get_descriptive_name(self):
        """Return a neatly formatted descriptive name."""
        long_name = f"{self.year} {self.make} {self.model}"
        return long_name.title()
    
    def read_odometer(self):                                        
        """Print a statement showing the car's mileage."""
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self, mileage):                                      
        """
        Set the odometer reading to the giving value.
        Reject the chang if it attempts to roll the odometer back.
        """
        if mileage >= self.odometer_reading:                            
            self.odometer_reading = mileage                             
        else:                                                          
            print("You can't roll back an odometer!")

    def increment_odometer(self, miles):
        """Add the given amount to the odometer reading."""
        self.odometer_reading += miles




class Battery:                                                                              
    """Asimple attemp to model a battery for an electric car."""

    def __init__(self, battery_size=75):                                                          
        """Initialize the battery's attributs."""
        self.battery_size = battery_size

    def describe_battery(self):                                                                 
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kwh battery.")


            #‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨ácodigo nuevo‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á
    def get_range(self):                                                                        #(1)
        """print a statement about the range this battery provides."""
        if self.battery_size == 75:
            range = 260
        elif self.battery_size == 100:
            range = 315

        print(f"This car can go about {range} miles on full charge.")
            #‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ücodigo nuevo‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü‚¨Ü


class ElectricCar(Car):
    """Represent aspects of a car, specific to electric vehicles."""

    def __init__(self, make, model, year):
        """
        Initialize attributes of the parent class.
        Then initialize attributes specific to an electric car.
        """
        super().__init__(make, model, year)
        self.battery = Battery()       
    def describe_battery(self):
        """Print a statement describing the battery size."""
        print(f"This car has a {self.battery_size}-kwh battery.")

my_tesla = ElectricCar('tesla', 'model s', 2019)

print(my_tesla.get_descriptive_name())
my_tesla.battery.describe_battery()    
my_tesla.battery.get_range()  #‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Ö‚¨Öcodigo nuevo          #(2)

#El nuevo m√©todo get_range() en ‚û°(1)‚¨Ö realiza un an√°lisis simple. 
# Si la capacidad de la bater√≠a es de 75 kWh, get_range() establece el alcance en 260 millas, 
# y si la capacidad es de 100 kWh, establece el alcance en 315 millas. 
# Luego informa este valor. 
# Cuando queramos usar este m√©todo, nuevamente tenemos que llamarlo a 
# trav√©s del atributo de bater√≠a del autom√≥vil en ‚û°(2)‚¨Ö. 
# 
# La salida nos dice la autonom√≠a del coche en funci√≥n del tama√±o de la bater√≠a:
#
#           >>> 2019 Tesla Model S
#           >>> This car has a 75-kwh battery.
#           >>> This car can go about 260 miles on full charge.


   








            #`5-  Modeling Real-Worls Objects

                #A medida que comience a modelar cosas m√°s complicadas, como autom√≥viles el√©ctricos, se enfrentar√° a preguntas 
                # interesantes. ¬øLa autonom√≠a de un coche el√©ctrico es una propiedad de la bater√≠a o del coche? Si solo estamos 
                # describiendo un auto, probablemente est√© bien mantener la asociaci√≥n del m√©todo get range() con la clase
                #  Battery. Pero si estamos describiendo toda la l√≠nea de autom√≥viles de un fabricante, probablemente queramos 
                # mover get_range() a la clase ElectricCar. El m√©todo get range() todav√≠a verificar√≠a el tama√±o de la bater√≠a 
                # antes de determinar el rango, pero informar√≠a un rango espec√≠fico para el tipo de autom√≥vil con el que est√° 
                # asociado. Alternativamente, podr√≠amos mantener la asociaci√≥n del m√©todo get_range() con la bater√≠a pero 
                # pasarle un par√°metro como el modelo de autom√≥vil. El m√©todo get_range() luego informar√≠a un rango basado en 
                # el tama√±o de la bater√≠a y el modelo de autom√≥vil.

                #Esto te lleva a un punto interesante en tu crecimiento como programador. 
                # Cuando lucha con preguntas como estas, est√° pensando en un nivel l√≥gico 
                # superior en lugar de un nivel centrado en la sintaxis. No est√°s pensando 
                # en Python, sino en c√≥mo representar el mundo real en c√≥digo. 
                # Cuando llegue a este punto, se dar√° cuenta de que a menudo no hay enfoques 
                # correctos o incorrectos para modelar situaciones del mundo real. Algunos 
                # enfoques son m√°s eficientes que otros, pero se necesita pr√°ctica para 
                # encontrar las representaciones m√°s eficientes. Si tu c√≥digo funciona como 
                # quieres, ¬°lo est√°s haciendo bien! No se desanime si descubre que est√° 
                # fragmentando sus clases y reescribi√©ndolas varias veces utilizando diferentes 
                # enfoques. En la b√∫squeda de escribir c√≥digo preciso y eficiente, todo el mundo 
                # pasa por este proceso.













                        #ü¶ö           Importing Classes

                                                        #A medida que agrega m√°s funcionalidad a sus clases, sus archivos pueden alargarse, 
                                                        # incluso cuando usa la herencia correctamente. De acuerdo con la filosof√≠a general 
                                                        # de Python, querr√° mantener sus archivos lo m√°s ordenados posible. Para ayudar, 
                                                        # Python le permite almacenar clases en m√≥dulos y luego importar las clases que 
                                                        # necesita en su programa principal.

#comando de prueba
