            #CAPITULO 7         
#  üêç                     USER INPUT AND WHILE LOOPS


#La mayor√≠a de los programas est√°n escritos para resolver el problema de un usuario final. 
# Para hacerlo, generalmente necesita obtener cierta informaci√≥n del usuario. 
# Para un ejemplo simple, digamos que alguien quiere saber si tiene la edad suficiente para votar.
#Si escribe un programa para responder a esta pregunta, necesita saber la edad del usuario antes de poder proporcionar una respuesta. 
# El programa deber√° pedirle al usuario que ingrese/'input', su edad; una vez que el programa tiene esta entrada, 
# puede compararla con la edad de votaci√≥n para determinar si el usuario tiene la edad suficiente y luego informar el resultado.

#En este cap√≠tulo, aprender√° c√≥mo aceptar la entrada del usuario para que su programa pueda trabajar con ella. 
# Cuando su programa necesite un nombre, podr√° pedirle al usuario un nombre. Cuando su programa necesite una 
# lista de nombres, podr√° solicitar al usuario una serie de nombres. Para ello, utilizar√° la funci√≥n input().

#You'll also learn how to keep programs running as long as users want them to, so they can enter as much 
# information as they need to; then, your program can work with that information. 
# You'll use Python's while loop to keep programs running as long as certain conditions remain true.

#Con la capacidad de trabajar con la entrada del usuario y la capacidad de controlar cu√°nto tiempo 
# se ejecutan sus programas, podr√° escribir programas totalmente interactivos.







        #HOW THE INPUT() FUNTION WORKS

#La funci√≥n input() pausa su programa y espera a que el usuario ingrese alg√∫n texto. 
# Una vez que Python recibe la entrada del usuario, asigna esa entrada a una variable para que sea conveniente para usted trabajar con ella.

#Por ejemplo, el siguiente programa le pide al usuario que ingrese alg√∫n texto, luego muestra ese mensaje al usuario:
message = input("Telll me something, and I will repeat it back to you:")
print(message)

#La funci√≥n input() toma un argumento: el mensaje o las instrucciones que queremos mostrar al usuario para que sepa qu√© hacer. 
# En este ejemplo, cuando Python ejecuta la primera l√≠nea, el usuario ve el mensaje Dime algo y te lo repetir√©:. 
# El programa espera mientras el usuario ingresa su respuesta y contin√∫a despu√©s de que el usuario presiona ENTER. 
# La respuesta se asigna al mensaje variable, luego print (mensaje) muestra la entrada al usuario.

#Sublime Text and many other editors don't run programs that prompt the user for input. 
# You can use these editors to write programs that prompt for input, but you'll need to run these programs from a terminal. 
# See "Running Python Programs from a Terminal" on page 12.











        #`1- Writing Clear Prompts.

# Cada vez que utilice la funci√≥n input(), debe incluir un aviso claro y f√°cil de seguir que le diga al usuario exactamente 
# qu√© tipo de informaci√≥n est√° buscando. Cualquier declaraci√≥n que le diga al usuario qu√© ingresar deber√≠a funcionar. 
# Por ejemplo:
name = input("Please enter your name: ")
print(f"\nHello, {name}!")

#Agregue un espacio al final de sus avisos (despu√©s de los dos puntos en el ejemplo anterior) para separar el 
# aviso de la respuesta del usuario y dejarle claro a su usuario d√≥nde ingresar su texto.

#A veces, querr√° escribir un aviso que sea m√°s largo que una l√≠nea. Por ejemplo, es posible que desee decirle 
# al usuario por qu√© est√° solicitando cierta entrada. Puede asignar su aviso a una variable y pasar esa 
# variable a la funci√≥n input(). Esto le permite construir su solicitud en varias l√≠neas, luego escribir 
# una declaraci√≥n de entrada () limpia.
prompt = "If you  tell us who you are, we, can personalize the messeges you see."
prompt += "\nWhat is your first name?"

name = input(prompt)
print(f"\nHello,{name}") #El mensaje ahora ocupa dos l√≠neas, nuevamente con un espacio despu√©s del signo de interrogaci√≥n para mayor claridad.
#Este ejemplo muestra una forma de construir una cadena de varias l√≠neas. 
# La primera l√≠nea asigna la primera parte del mensaje al aviso variable. 
# En la segunda l√≠nea, el operador += toma la cadena que se asign√≥ a prompt y agrega la nueva cadena al final.







        #`2- Using int() to Accept Numerical input.

#Cuando usa la funci√≥n input(), Python interpreta todo lo que el usuario ingresa como una cadena. 
# Considere la siguiente sesi√≥n de interpretaci√≥n, que solicita la edad del usuario:
age = input("How old are you? ")
#el valor de "age" seria un valor de tipo string. y no de numeros (entero/float).

#El usuario ingresa el n√∫mero 21, pero cuando le preguntamos a Python por el valor de la edad, devuelve '21', 
# la representaci√≥n de cadena del valor num√©rico ingresado. 
# Sabemos que Python interpret√≥ la entrada como una cadena porque el n√∫mero ahora est√° entre comillas. 
# Si todo lo que quiere hacer es imprimir la entrada, esto funciona bien. 
# Pero si intenta usar la entrada como un n√∫mero, obtendr√° un error: ‚Üò
#age = input("How old are you? ")                                     ‚¨á
#age >= 18                                                           ‚Üô
#Traceback (most recent call last): File "<stdin>", line 1, in <module>
#TypeError: unorderable types: str() >= int()

#Podemos resolver este problema usando la funci√≥n int(), que le dice a Python que trate la entrada como un valor num√©rico. 
# La funci√≥n int() convierte una representaci√≥n de cadena de un n√∫mero en una representaci√≥n num√©rica, como se muestra aqu√≠:
age == input("How old are you? ")
#>>>How old are you? 21
age = int(age)
age >= 18
#True

#En este ejemplo üëÜ, cuando ingresamos 21 en el indicador, Python interpreta el n√∫mero como una cadena, 
# pero el valor se convierte en una representaci√≥n num√©rica mediante int().

#¬øC√≥mo se usa la funci√≥n int() en un programa real? 
# Considere un programa que determina si las personas son lo suficientemente altas como para subirse a una monta√±a rusa:
height = input("How tall are you, in inches? ")
height = int(height)

if height >= 48:
    print("\nYou're tall enough to ride!")
else:
    print("\nYou'll be able to ride when you're a little older.")
#El programa puede comparar la altura con 48 porque altura = int(altura) convierte el valor de 
# entrada en una representaci√≥n num√©rica antes de realizar la comparaci√≥n. 
# Si el n√∫mero ingresado es mayor o igual a 48, le decimos al usuario que es lo suficientemente alto:
    #>>>How tall are you, in inches? 71
    #>>>You're tall enough to ride!
#Cuando usa entradas num√©ricas para hacer c√°lculos y comparaciones. 
# aseg√∫rese de convertir primero el valor de entrada a una representaci√≥n num√©rica.







    #  THE MODULO OPERATOR 

#Una herramienta √∫til para trabajar con informaci√≥n num√©rica es el operador m√≥dulo (*). 
# que divide un n√∫mero por otro n√∫mero y devuelve el resto.

4 % 3 # = 1

5 % 3 # = 2

6% 3 # 0

7 % 3 # = 1

#El operador m√≥dulo no te dice cu√°ntas veces cabe un n√∫mero en otro; simplemente te dice cu√°l es el resto.

#Cuando un n√∫mero es divisible por otro n√∫mero, el resto es 0, por lo que el operador de m√≥dulo siempre 
# devuelve 0. Puedes usar este hecho para determinar si un n√∫mero es par o impar:
number = input("Enter a number, and I'll tell you if it's even or odd: ")
number = int(number)

if number % 2 == 0:
    print(f"\n The number {number} is even.")
else:
    print(f"The number {number} is odd.")
#Los n√∫meros pares siempre son divisibles por dos, por lo que si el m√≥dulo de un n√∫mero y 
# dos es cero (aqu√≠, si el n√∫mero % 2 == 0) el n√∫mero es par. De lo contrario, es raro.
