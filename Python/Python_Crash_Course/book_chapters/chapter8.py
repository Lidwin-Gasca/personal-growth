
        # CHAPTER 8

#                          _____ Fucntions ____

#                                 ____________
#                               /              \
#                              /                \
#                             |                  |
#                             |                  |
#                              \                /
#                               \  ___________ /
#                               /              \
#                              /                \
#                             |                  |
#                             |                  |
#                              \                /
#                               \  ___________ /


                    #En este capรญtulo, aprenderรก a escribir funciones, que son bloques de cรณdigo con nombre que estรกn diseรฑados 
                    # para realizar un trabajo especรญfico. Cuando desea realizar una tarea particular que ha definido en una 
                    # funciรณn, llama a la funciรณn responsable de la misma. Si necesita realizar esa tarea varias veces a lo largo 
                    # de su programa, no necesita escribir todo el cรณdigo para la misma tarea una y otra vez; simplemente llama a 
                    # la funciรณn dedicada a manejar esa tarea, y la llamada le dice a Python que ejecute el cรณdigo dentro de la 
                    # funciรณn. Descubrirรก que el uso de funciones hace que sus programas sean mรกs fรกciles de escribir, leer, probar 
                    # y corregir.

                    #En este capรญtulo tambiรฉn aprenderรก formas de pasar informaciรณn a las funciones. Aprenderรก a escribir ciertas 
                    # funciones cuyo trabajo principal es mostrar informaciรณn y otras funciones diseรฑadas para procesar datos y 
                    # devolver un valor o conjunto de valores. Finalmente, aprenderรก a almacenar funciones en archivos separados 
                    # llamados mรณdulos para ayudar a organizar sus archivos de programa principales.








#   ๐ฆ  Defining a Funtion

    #Aqui hay una funcion/function llamado greet_user() que imprime saludos (en ingles).
    
def greet_user():                           #(1)
    """Display a simple greeting."""        #(2)
    print("Hello!")                         #(3)
greet_user()                                #(4)

#Este ejemplo muestra la estructura mรกs simple de una funciรณn. 

# La lรญnea en โก(1)โฌ 
# usa la palabra clave def para informar a Python que estรก definiendo una funciรณn. 
# Esta es la definiciรณn de la funciรณn, que le dice a Python el nombre de la funciรณn y, si corresponde, 
# quรฉ tipo de informaciรณn necesita la funciรณn para hacer su trabajo. Los parรฉntesis contienen esa informaciรณn. 
# En este caso, el nombre de la funciรณn es greeting_user() y no necesita informaciรณn para hacer su trabajo, p
# or lo que sus parรฉntesis estรกn vacรญos. (Aรบn asรญ, los parรฉntesis son obligatorios). 
# Finalmente, la definiciรณn termina en dos puntos.

#Cualquier lรญnea sangrada que siga a def greeting_user(): constituye el cuerpo de la funciรณn. 
# El texto en โก(2)โฌ es un comentario llamado docstring, que describe lo que hace la funciรณn. 
# Las cadenas de documentos estรกn encerradas entre comillas triples, 
# que Python busca cuando genera documentaciรณn para las funciones en los programas.

#La lรญnea โก(3)โฌ 
# print("ยกHola!") es la รบnica lรญnea de cรณdigo real en el cuerpo de esta funciรณn, 
# por lo que Greet_user() solo tiene un trabajo: print("ยกHola!").


#Cuando quiera usar esta funciรณn, llรกmela. 
# Una llamada de funciรณn le dice a Python que ejecute el cรณdigo en la funciรณn. 
# Para llamar a una funciรณn, escribe el nombre de la funciรณn, seguido de cualquier informaciรณn necesaria entre parรฉntesis, 
# como se muestra en linea โก(4)โฌ. Debido a que no se necesita informaciรณn aquรญ, 
# llamar a nuestra funciรณn es tan simple como ingresar greeting_user(). 
# Como era de esperar, imprime Hello!:







        #`1- Passing Information to a Function
    #
    #Modificada ligeramente, la funciรณn greeting_user() no solo puede decirle al usuario ยกHola! sino tambiรฉn saludarlos por su nombre. 
    # Para que la funciรณn haga esto, ingrese 'nombre de usuario' entre parรฉntesis de la definiciรณn de la funciรณn en def greeting_user(). 
    # Al agregar 'nombre de usuario' aquรญ, permite que la funciรณn acepte cualquier valor de nombre de usuario que especifique. 
    # La funciรณn ahora espera que proporcione un valor para 'nombre de usuario' cada vez que la llame. 
    # Cuando llamas a greeting_user(), puedes pasarle un nombre, como 'jesse', entre parรฉntesis:
def greet_user(username):
    """Display a simple greting."""
    print(f"Hello, {username.title()}!")

greet_user('jesse')
    #Ingresar a greeting_user('jesse') llama a greeting_user() y le da a la funciรณn la informaciรณn que necesita para ejecutar la llamada print().
    #La funciรณn acepta el nombre que le pasรณ y muestra el saludo para ese nombre: 
    #           >>> Hello, Jesse!
    #Del mismo modo, al ingresar greeting_user('sarah') llama a greeting_user(), 
    # le pasa 'sarah' e imprime ยกHola, Sarah! Puede llamar a greeting_user() tantas 
    # veces como desee y pasarle cualquier nombre que desee para producir un resultado predecible cada vez.









        #`2- Arguments and Parameters
    #
    #En la funciรณn de saludo_usuario() anterior, definimos saludo_usuario() para requerir un valor para la variable nombre de usuario. 
    # Una vez que llamamos a la funciรณn y le dimos la informaciรณn (el nombre de una persona), imprimiรณ el saludo correcto.

    #El nombre de usuario variable en la definiciรณn de greeting_user() es un ejemplo de un parรกmetro, 
    # una informaciรณn que la funciรณn necesita para hacer su trabajo. 
    # El valor 'jesse' en greeting_user('jesse') es un ejemplo de un argumento. 
    # Un argumento es una pieza de informaciรณn que se pasa de una llamada de funciรณn a una funciรณn. 
    # Cuando llamamos a la funciรณn, colocamos el valor con el que queremos que trabaje la funciรณn entre parรฉntesis. 
    # En este caso, el argumento 'jesse' se pasรณ a la funciรณn greeting_user() y el valor se asignรณ al parรกmetro nombre de usuario.

                #NOTE
    #                La gente a veces habla de argumentos y parรกmetros indistintamente. 
    #                No se sorprenda si ve las variables en una definiciรณn de funciรณn 
    #                referidas como argumentos o las variables en una llamada de funciรณn 
    #                referidas como parรกmetros.                    
    #
    #
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    #           โฌ
    

        #`3-  Passing Arguments

    #Debido a que una definiciรณn de funciรณn puede tener mรบltiples parรกmetros, una llamada de funciรณn puede necesitar mรบltiples argumentos. 
    # Puede pasar argumentos a sus funciones de varias maneras. 
    # Puede usar argumentos posicionales, que deben estar en el mismo orden en que se escribieron los parรกmetros; 
    # argumentos de palabras clave, donde cada argumento consta de un nombre de variable y un valor; y listas y diccionarios de valores. 
    # Veamos cada uno de estos a su vez.











        #`4- Positional Arguments

    #Cuando llama a una funciรณn, Python debe hacer coincidir cada argumento en la llamada a 
    # la funciรณn con un parรกmetro en la definiciรณn de la funciรณn. La forma mรกs sencilla de 
    # hacerlo se basa en el orden de los argumentos proporcionados. Los valores emparejados 
    # de esta manera se denominan argumentos posicionales.

    #Para ver cรณmo funciona esto, considere una funciรณn que muestre informaciรณn sobre mascotas. 
    # La funciรณn nos dice quรฉ tipo de animal es cada mascota y el nombre de la mascota, como se muestra aquรญ:

def describe_pet(animal_type, pet_name):                        #(1)
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.title()}")

describe_pet('hamster', 'harry')                                #(2)

    #La definiciรณn muestra que esta funciรณn necesita un tipo de animal y el nombre del animal โก(1)โฌ. 
    # Cuando llamamos a describe_pet(), necesitamos proporcionar un animal_type y un nombre, en ese orden. 
    # Por ejemplo, en la llamada de funciรณn, el argumento 'hamster' se asigna al parรกmetro animal_type y el 
    # argumento 'harry' se asigna al parรกmetro pet_name โก(2)โฌ. En el cuerpo de la funciรณn. 
    # estos dos parรกmetros se utilizan para mostrar informaciรณn sobre la mascota que se describe.
    #El resultado describe a un hรกmster llamado Harry:
    #
    #               >>> I have a hamster.
    #               >>> My hamster's name is Harry














        #`5- Multiple Function Calls

    #Puede llamar a una funciรณn tantas veces como sea necesario. 
    # Describir una segunda mascota diferente requiere solo una llamada mรกs a describe_pet():
def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.title()}")

describe_pet('hamster', 'harry') 
describe_pet('dog', 'willie')
    #En esta segunda llamada de funciรณn, pasamos describe_pet() los argumentos dog' y 'willie'. 
    # Al igual que con el conjunto anterior de argumentos que usamos, Python hace coincidir 
    # 'perro' con el parรกmetro tipo_animal y 'willie' con el parรกmetro nombre_mascota como antes, 
    # la funciรณn hace su trabajo, pero esta vez imprime valores para un perro llamado Willie. 
    # Ahora tenemos un hรกmster llamado Harry y un perro llamado Willie:
    #
    #               >>> I have a hamster.
    #               >>> My hamster's name is Harry
    #
    #               >>> I have a dog.
    #               >>> My dog's name is willie
    #
    #Llamar a una funciรณn varias veces es una forma muy eficiente de trabajar. 
    # El cรณdigo que describe una mascota se escribe una vez en la funciรณn. 
    # Luego, cada vez que desee describir una nueva mascota, llame a la funciรณn con la informaciรณn de la nueva mascota. 
    # Incluso si el cรณdigo para describir una mascota se expandiera a diez lรญneas, 
    # aรบn podrรญa describir una nueva mascota en una sola lรญnea llamando a la funciรณn nuevamente.
    #
    #Puede usar tantos argumentos posicionales como necesite en sus funciones. 
    # Python funciona a travรฉs de los argumentos que proporciona al llamar a la funciรณn y 
    # hace coincidir cada uno con el parรกmetro correspondiente en la definiciรณn de la funciรณn.



















        #`6- Order Matters in Positional Arguments

    #Puede obtener resultados inesperados si mezcla el orden de los argumentos en una llamada de funciรณn cuando usa argumentos posicionales:
def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.title()}")

describe_pet('harry', 'hamster')
    #En esta llamada de funciรณn enumeramos primero el nombre y segundo el tipo de animal. 
    # Debido a que el argumento 'harry' aparece primero esta vez, ese valor se asigna al parรกmetro animal_type. 
    # Asimismo, se asigna 'hรกmster' al nombre de la mascota. Ahora tenemos un "harry" llamado "Hamster":
    #
    #           >>> I have a harry.
    #           >>> My harry's name is Hamster.
    #
    #Si obtiene resultados divertidos como este, asegรบrese de que el orden de los argumentos en 
    # su llamada a la funciรณn coincida con el orden de los parรกmetros en la definiciรณn de la funciรณn.
















        #`7-  Keyword Arguments

    #Un argumento de palabra clave/keyword es un par de nombre y valor que pasa a una funciรณn. 
    # Asocias directamente el nombre y el valor dentro del argumento, asรญ que cuando 
    # pasas el argumento a la funciรณn, no hay confusiรณn (no terminarรกs con un harry llamado Hamster). 
    # Los argumentos de palabras clave/keyword lo liberan de tener que preocuparse por ordenar 
    # correctamente sus argumentos en la llamada a la funciรณn y aclaran el rol de cada valor en la llamada a la funciรณn.
    #
    #Reescribamos pets.py usando argumentos de palabras clave/keyword para llamar a describe_pet():
def describe_pet(animal_type, pet_name):
    """Display information about a pet."""
    print(f"\nI have a {animal_type}.")
    print(f"My {animal_type}'s name is {pet_name.title()}")
    #
describe_pet(animal_type='hamster', pet_name='harry')
describe_pet(pet_name='harry', animal_type='hamster')
    #NOTE
    #   Cuando utilice argumentos de palabras clave, asegรบrese de utilizar 
    #   los nombres exactos de los parรกmetros en la definiciรณn de la funciรณn.
    #















        #`8- Default Values

    #Al escribir una funciรณn, puede definir un valor predeterminado para cada parรกmetro. 
    # Si se proporciona un argumento para un parรกmetro en la llamada a la funciรณn, Python usa el valor del argumento. 
    # Si no, utiliza el valor predeterminado del parรกmetro. 
    # Entonces, cuando define un valor predeterminado para un parรกmetro, puede excluir el argumento 
    # correspondiente que normalmente escribirรญa en la llamada a la funciรณn. 
    # El uso de valores predeterminados puede simplificar sus llamadas a funciones 
    # y aclarar las formas en que se usan normalmente sus funciones.

    #Por ejemplo, si observa que la mayorรญa de las llamadas a describe_pet() se utilizan para describir perros, 
    # puede establecer el valor predeterminado de animal_type en 'perro'. 
    # Ahora cualquiera que llame a describe_pet() para un perro puede omitir esa informaciรณn:
